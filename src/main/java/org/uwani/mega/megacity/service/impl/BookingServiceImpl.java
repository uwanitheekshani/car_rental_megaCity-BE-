package org.uwani.mega.megacity.service.impl;



import org.uwani.mega.megacity.dao.BookingDAO;
import org.uwani.mega.megacity.dto.BookingDTO;
import org.uwani.mega.megacity.entity.Booking;
import org.uwani.mega.megacity.service.BookingService;

import java.sql.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.List;

public class BookingServiceImpl implements BookingService {
    private BookingDAO bookingDAO = new BookingDAO();

    // Convert DTO to Entity
    // Convert DTO to Entity
    private Booking toEntity(BookingDTO dto) throws ParseException {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        return new Booking(
                0,  // ID (auto-generated by DB)
                dto.getUserId(),
                dto.getCarId(),
                new Date(sdf.parse(dto.getStartDate()).getTime()),  // Convert String to SQL Date
                new Date(sdf.parse(dto.getEndDate()).getTime()),    // Convert String to SQL Date
                dto.getTotalAmount(),
                dto.getStatus(),
                new Date(System.currentTimeMillis()),  // Set CreatedAt
                new Date(System.currentTimeMillis())   // Set UpdatedAt
        );
    }

    // CREATE Booking
    @Override
    public boolean createBooking(BookingDTO bookingDTO) {
        try {
            Booking booking = toEntity(bookingDTO);
            return bookingDAO.createBooking(booking);
        } catch (ParseException e) {
            e.printStackTrace();
            return false;
        }
    }


    // READ Booking by ID
    @Override
    public Booking getBookingById(int id) {
        return bookingDAO.getBookingById(id);
    }

    // READ All Bookings
    @Override
    public List<Booking> getAllBookings() {
        return bookingDAO.getAllBookings();
    }

    // UPDATE Booking
    @Override
    public boolean updateBooking(int id, BookingDTO bookingDTO) {
        try {
            Booking existingBooking = bookingDAO.getBookingById(id);
            if (existingBooking != null) {
                existingBooking.setStartDate(new SimpleDateFormat("yyyy-MM-dd").parse(String.valueOf(bookingDTO.getStartDate())));
                existingBooking.setEndDate(new SimpleDateFormat("yyyy-MM-dd").parse(String.valueOf(bookingDTO.getEndDate())));
                existingBooking.setTotalAmount(bookingDTO.getTotalAmount());
                existingBooking.setStatus(bookingDTO.getStatus());
                return bookingDAO.updateBooking(existingBooking);
            }
        } catch (ParseException e) {
            e.printStackTrace();
        }
        return false;
    }

    // DELETE Booking
    @Override
    public boolean deleteBooking(int id) {
        return bookingDAO.deleteBooking(id);
    }
}
